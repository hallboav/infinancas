#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;

$compiler = new Compiler(__DIR__ . '/..');
$compiler->compile(
    new \SplFileInfo('bin/infinancas.phar'),
    new  SplFileInfo('bin/infinancas', '', 'bin/infinancas')
);

class Compiler
{
    public function __construct($root)
    {
        chdir($root);
    }

    public function compile(\SplFileInfo $output, SplFileInfo $stub)
    {
        if (file_exists($output)) {
            unlink($output);
        }

        $alias = $output->getFileName();
        $phar = new \Phar($output, 0, $alias);
        $phar->setSignatureAlgorithm(\Phar::SHA1);

        $phar->startBuffering();
        $phar->setStub($this->getStub($alias, $stub));

        $contents = $stub->getContents();
        $contents = preg_replace('{^#!/usr/bin/env php\s*}', '', $contents);
        $phar->addFromString($stub->getRelativePathname(), $contents);

        $this->addDir($phar, 'src/app');
        $this->addDir($phar, 'src/infinancas');
        $this->addVendor($phar, 'vendor', ['symfony/finder']);

        $phar->stopBuffering();
    }

    private function getStub($alias, $stub)
    {
        return <<<EOF
#!/usr/bin/env php
<?php
Phar::mapPhar('{$alias}');
require 'phar://{$alias}/{$stub}';
__HALT_COMPILER();
EOF;
    }

    private function removeFromAutoload($path, $packages)
    {
        $autoload = $path . DIRECTORY_SEPARATOR . 'composer' . DIRECTORY_SEPARATOR . 'autoload_psr4.php';
        $contents = file_get_contents($autoload);

        foreach ($packages as $package) {
            $pattern = sprintf('/^.*?%s.*\n?/m', preg_quote($package, '/'));
            $contents = preg_replace($pattern, '', $contents);
        }

        file_put_contents($autoload, $contents);
    }

    private function addVendor(\Phar $phar, $path, $excludes = [])
    {
        $this->removeFromAutoload($path, $excludes);
        $this->addDir($phar, $path, $excludes, true);
    }

    private function addDir(\Phar $phar, $directory, $excludes = [], $strip = false)
    {
        $files = Finder::create()->files()
            ->ignoreVCS(true)
            ->name('*.php')
            ->name('LICENSE')
            ->exclude('Tests')
            ->exclude('tests')
            ->exclude('test')
            ->exclude($excludes)
            ->in($directory);

        foreach ($files as $file) {
            $this->addFile($phar, $file, $strip);
        }
    }

    private function addFile(\Phar $phar, SplFileInfo $file, $strip)
    {
        $contents = $file->getContents();

        if ($strip) {
            $contents = $this->stripWhitespace($contents);
        } elseif ('LICENSE' === $file->getFileName()) {
            $contents = PHP_EOL . $contents . PHP_EOL;
        }

        $phar->addFromString($file, $contents);
    }

    private function stripWhitespace($source)
    {
        if (!function_exists('token_get_all')) {
            return $source;
        }

        $output = '';
        foreach (token_get_all($source) as $token) {
            if (is_string($token)) {
                $output .= $token;
            } elseif (in_array($token[0], array(T_COMMENT, T_DOC_COMMENT))) {
                $output .= str_repeat("\n", substr_count($token[1], "\n"));
            } elseif (T_WHITESPACE === $token[0]) {
                // reduce wide spaces
                $whitespace = preg_replace('{[ \t]+}', ' ', $token[1]);
                // normalize newlines to \n
                $whitespace = preg_replace('{(?:\r\n|\r|\n)}', "\n", $whitespace);
                // trim leading spaces
                $whitespace = preg_replace('{\n +}', "\n", $whitespace);
                $output .= $whitespace;
            } else {
                $output .= $token[1];
            }
        }

        return $output;
    }
}
